// This is a TypeScript port of the BpmnLiteParser from the main application
// Auto-generated by build-parser.js - DO NOT EDIT DIRECTLY
// Last sync: 2025-08-13T20:06:48.342Z

export class BpmnLiteParser {
  private processes: string[] = [];
  private lanes: Record<string, { process: string | null; tasks: string[] }> = {};
  private tasks: Record<string, any> = {};
  private connections: any[] = [];
  private dataObjects: any[] = [];
  private messages: any[] = [];
  private events: string[] = [];
  private currentProcess: string | null = null;
  private currentLane: string | null = null;
  private lastTask: string | null = null;
  private taskScope: Record<string, string> = {};
  private gatewayStack: string[] = [];
  private connectionBreaks: number[] = [];
  private taskLineNumbers: Record<string, number> = {};
  private originalText: string = '';
  private currentLineIndex: number = 0;
  private endEventLane: string | null = null;

  constructor() {}

  parse(text: string): any {
    // Reset state
    this.processes = [];
    this.lanes = {};
    this.tasks = {};
    this.connections = [];
    this.dataObjects = [];
    this.messages = [];
    this.events = [];
    this.currentProcess = null;
    this.currentLane = null;
    this.lastTask = null;
    this.taskScope = {};
    this.gatewayStack = [];
    this.connectionBreaks = [];
    this.taskLineNumbers = {};
    this.originalText = text;
    this.currentLineIndex = 0;
    this.endEventLane = null;

    const lines = text.split('\n');
    
    // Create default process if none specified
    this.ensureProcess("Default Process");
    
    // First pass: collect processes, lanes, and tasks
    for (let i = 0; i < lines.length; i++) {
      this.currentLineIndex = i;
      const originalLine = lines[i];
      const line = originalLine.trim();
      if (!line) continue; // Skip empty lines
      
      // Check for connection break line
      if (line === '---' || line.match(/^-{3,}$/)) {
        this.connectionBreaks.push(i);
        continue; // Skip processing this line further
      }
      
      // Find first non-whitespace character for line type detection
      const firstNonWhitespace = line.match(/\S/);
      if (!firstNonWhitespace) continue;
      
      const firstChar = firstNonWhitespace[0];
      
      // Check for connected parts with -> or <- operators
      const parts = this.splitConnections(line);
      
      if (parts.length > 1) {
        // Process each part and create the connections
        let prevTaskId = null;
        let prevOperator = null;
        
        for (let j = 0; j < parts.length; j++) {
          const part = parts[j];
          
          // Skip operators
          if (part === '->' || part === '<-') {
            prevOperator = part;
            continue;
          }
          
          // Check if this part needs special handling for cross-lane references
          let taskId = null;
          
          // If we have a previous operator and this might be a reference to another task
          if (prevOperator && !this.isSpecialLine(part)) {
            // Try to resolve it as a task reference first
            taskId = this.resolveTaskId(part, true); // Create if not found
          }
          
          // If not resolved as reference, process normally
          if (!taskId) {
            taskId = this.processLinePart(part, part.charAt(0), i);
          }
          
          // Create connection if we have a previous task and operator
          if (prevTaskId && taskId && prevOperator) {
            if (prevOperator === '->') {
              this.addConnection('flow', prevTaskId, taskId);
            } else if (prevOperator === '<-') {
              this.addConnection('flow', taskId, prevTaskId);
            }
          }
          
          if (taskId) {
            prevTaskId = taskId;
          }
        }
      } else {
        // Single part, process normally (pass line number)
        this.processLinePart(line, firstChar, i);
      }
    }

    // Auto-inject connection breaks after End events
    this.injectConnectionBreaksAfterEndEvents(lines);

    // Automatically connect tasks using the new connectivity engine
    this.connectTasks();

    // Build the AST
    const ast = {
      type: 'bpmnModel',
      processes: this.processes.map(processName => ({
        type: 'process',
        name: processName,
        id: this.normalizeId(processName),
        lanes: Object.entries(this.lanes)
          .filter(([_, lane]) => lane.process === processName)
          .map(([laneName, lane]) => ({
            type: 'lane',
            name: laneName.replace('@', ''),
            id: this.normalizeId(laneName),
            elements: lane.tasks.map(taskId => this.tasks[taskId])
          }))
      })),
      connections: this.connections,
      dataObjects: this.dataObjects,
      messages: this.messages
    };

    return ast;
  }
  
  private splitConnections(line: string): string[] {
    const parts = [];
    let currentPart = '';
    let i = 0;
    
    while (i < line.length) {
      if (line.substr(i, 2) === '->' || line.substr(i, 2) === '<-') {
        // Add the current part if it exists
        if (currentPart.trim()) {
          parts.push(currentPart.trim());
        }
        // Add the operator as a separate part
        parts.push(line.substr(i, 2));
        currentPart = '';
        i += 2;
      } else {
        currentPart += line[i];
        i++;
      }
    }
    
    // Add the last part if it exists
    if (currentPart.trim()) {
      parts.push(currentPart.trim());
    }
    
    return parts;
  }
  
  processLinePart(line: string, firstChar: string, lineNumber: number): string | null {
    // Process based on the first character
    let taskId = null;
    
    switch(firstChar) {
      case ':': // Process definition
        this.parseProcess(line);
        break;
      case '@': // Lane definition
        this.parseLane(line);
        break;
      case '^': // Message flow
        taskId = this.parseConnection(line);
        break;
      case '#': // Data object
        taskId = this.parseDataObject(line);
        break;
      case '?': // Gateway
        taskId = this.parseGateway(line);
        break;
      case '+': // Positive branch
      case '-': // Negative branch
        taskId = this.parseGatewayBranch(line, firstChar);
        break;
      case '"': // Comment
        taskId = this.parseComment(line);
        break;
      case '!': // Event
        taskId = this.parseEvent(line);
        break;
      case '/': // Technical comment (ignored)
        if (line.startsWith('//')) {
          // Ignore technical comments
          break;
        }
        // If not a comment, treat as a task
        taskId = this.parseTask(line);
        break;
      default:
        // Check if this is a task
        taskId = this.parseTask(line);
    }
    
    // Update last task if we created one
    if (taskId) {
      this.lastTask = taskId;
      // Store line number for this task
      if (lineNumber !== undefined) {
        this.taskLineNumbers[taskId] = lineNumber;
      }
    }
    
    return taskId || null;
  }
  
  parseEvent(line: string): string | null {
    const eventName = line.substring(1).trim(); // Remove the ! prefix
    let eventType = 'intermediate';
    let eventId;
    let isProcessLevel = false;
    
    // Determine event type based on common keywords
    if (eventName.toLowerCase() === 'start') {
      eventType = 'start';
      // Start events are process-level, not lane-specific
      eventId = 'process_start';
      isProcessLevel = true;
    } else if (eventName.toLowerCase() === 'end') {
      eventType = 'end';
      // End events are process-level, not lane-specific
      eventId = 'process_end';
      isProcessLevel = true;
    } else {
      // For non-start/end events, we need a lane
      if (!this.currentLane) {
        // Create a default lane if needed for intermediate events
        this.parseLane('@Default');
      }
      const laneName = this.currentLane ? this.currentLane.replace('@', '') : 'Default';
      const normalizedLaneName = this.normalizeId(laneName);
      // Intermediate events can be lane-specific
      eventId = `${normalizedLaneName}_${this.normalizeId(eventName)}`;
    }
    
    // Only create the event if it doesn't already exist (for Start/End)
    if (!this.tasks[eventId]) {
      this.tasks[eventId] = {
        type: 'event',
        eventType: eventType,
        name: eventName,
        id: eventId,
        lane: isProcessLevel ? null : (this.currentLane ? this.currentLane.replace('@', '') : 'Default') // Process-level events have no lane
      };
      
      // Track event for special handling
      this.events.push(eventId);
    }
    
    // For process-level events (Start/End), don't add to lane tasks
    if (!isProcessLevel && this.currentLane) {
      if (this.currentLane && this.lanes[this.currentLane]) {
        this.lanes[this.currentLane].tasks.push(eventId);
      }
    }
    
    // Add event to scope for reference
    const simpleName = this.normalizeId(eventName);
    this.taskScope[simpleName] = eventId;
    if (this.currentLane) {
      const laneName = this.currentLane ? this.currentLane.replace('@', '') : 'Default';
      this.taskScope[`${laneName}.${simpleName}`] = eventId;
      this.taskScope[`@${laneName}.${simpleName}`] = eventId;
    }
    
    return eventId || null;
  }

  ensureProcess(name: string): void {
    if (!this.processes.includes(name)) {
      this.processes.push(name);
      this.currentProcess = name;
    }
  }

  private parseProcess(line: string): void {
    const processName = line.substring(1).trim();
    this.ensureProcess(processName);
  }

  private parseLane(line: string): void {
    const laneName = line.trim();
    if (!this.lanes[laneName]) {
      this.lanes[laneName] = {
        process: this.currentProcess,
        tasks: []
      };
    }
    this.currentLane = laneName;
    this.lastTask = null; // Reset last task when changing lanes
  }

  private parseTask(line: string): string | null {
    if (!this.currentLane) {
      // Create a default lane if needed
      this.parseLane('@Default');
    }
    
    // Already trimmed the line in the main parse method
    if (!line) return null;
    
    let taskType = 'task';
    let taskName = line;
    let originalName = line; // Keep the original name for display
    
    // Check task type based on prefix
    if (line.startsWith('send:')) {
      taskType = 'send';
      taskName = line.substring(5).trim(); // Extract just the message name
      originalName = `send: ${taskName}`; // Keep the "send:" prefix in display name
    } else if (line.startsWith('receive:')) {
      taskType = 'receive';
      taskName = line.substring(8).trim(); // Extract just the message name
      originalName = `receive: ${taskName}`; // Keep the "receive:" prefix in display name
    }
    
    const laneName = this.currentLane ? this.currentLane.replace('@', '') : 'Default';
    const normalizedLaneName = this.normalizeId(laneName);
    const taskId = `${normalizedLaneName}_${this.normalizeId(originalName)}`;
    
    this.tasks[taskId] = {
      type: taskType,
      name: originalName, // Use original name with prefix for display
      messageName: taskType === 'send' || taskType === 'receive' ? taskName : null, // Store message name separately
      id: taskId,
      lane: laneName
    };
    
    if (this.currentLane && this.lanes[this.currentLane]) {
      this.lanes[this.currentLane].tasks.push(taskId);
    }
    
    // Add task to scope for reference in connections
    // Use simplified name without prefixes for lookup
    const simpleName = this.normalizeId(taskName);
    this.taskScope[simpleName] = taskId;
    this.taskScope[`${laneName}.${simpleName}`] = taskId;
    this.taskScope[`@${laneName}.${simpleName}`] = taskId;
    
    // Also add the full name with prefix for reference
    const fullName = this.normalizeId(originalName);
    this.taskScope[fullName] = taskId;
    this.taskScope[`${laneName}.${fullName}`] = taskId;
    this.taskScope[`@${laneName}.${fullName}`] = taskId;
    
    return taskId;
  }

  private parseGateway(line: string): string {
    if (!this.currentLane) {
      // Create a default lane if needed
      this.parseLane('@Default');
    }
    
    const gatewayName = line.substring(1).trim();
    const laneName = this.currentLane ? this.currentLane.replace('@', '') : 'Default';
    const normalizedLaneName = this.normalizeId(laneName);
    const gatewayId = `${normalizedLaneName}_${this.normalizeId(gatewayName)}`;
    
    this.tasks[gatewayId] = {
      type: 'gateway',
      gatewayType: 'exclusive',
      name: gatewayName,
      id: gatewayId,
      lane: laneName,
      branches: []
    };
    
    if (this.currentLane && this.lanes[this.currentLane]) {
      this.lanes[this.currentLane].tasks.push(gatewayId);
    }
    
    // Add gateway to scope for reference
    const simpleName = this.normalizeId(gatewayName);
    this.taskScope[simpleName] = gatewayId;
    this.taskScope[`${laneName}.${simpleName}`] = gatewayId;
    this.taskScope[`@${laneName}.${simpleName}`] = gatewayId;
    
    // Push to gateway stack
    this.gatewayStack.push(gatewayId);
    
    return gatewayId;
  }

  parseGatewayBranch(line: string, branchChar: string): string | null {
    if (this.gatewayStack.length === 0) {
      // No gateway to attach to
      return null;
    }
    
    const parentGateway = this.gatewayStack[this.gatewayStack.length - 1];
    let branchName = line.substring(1).trim();
    const laneName = this.currentLane ? this.currentLane.replace('@', '') : 'Default';
    const normalizedLaneName = this.normalizeId(laneName);
    
    // Check if branch contains arrow operators (e.g., "cancel order -> !End")
    // If so, only use the first part as the branch name
    if (branchName.includes('->') || branchName.includes('<-')) {
      const parts = this.splitConnections(branchName);
      if (parts.length > 0) {
        branchName = parts[0]; // Use only the first part as branch name
      }
    }
    
    // Check if this is a direct End event branch (just "!End" or "End")
    if (branchName.toLowerCase() === '!end' || branchName.toLowerCase() === 'end') {
      // Don't create a branch task, connect directly to the process-level end event
      const endEventId = 'process_end';
      
      // Ensure process-level end event exists
      if (!this.tasks[endEventId]) {
        this.tasks[endEventId] = {
          type: 'event',
          eventType: 'end',
          name: 'End',
          id: endEventId,
          lane: null // Process-level event has no lane
        };
        
        // Add to events list
        if (!this.events.includes(endEventId)) {
          this.events.push(endEventId);
        }
      }
      
      // Connect gateway to end event directly with appropriate label
      const branchLabel = branchChar === '+' ? 'Yes' : 'No';
      this.addConnection('flow', parentGateway, endEventId, branchLabel);
      
      return endEventId;
    }
    
    const branchId = `${normalizedLaneName}_${this.normalizeId(branchName)}`;
    
    // Check if this is a special format branch with custom label
    let displayName = branchName;
    let branchLabel = branchChar === '+' ? 'Yes' : 'No';
    
    // Check for custom label format |Label|content
    if (branchName.startsWith('|') && branchName.includes('|', 1)) {
      const labelEnd = branchName.indexOf('|', 1);
      branchLabel = branchName.substring(1, labelEnd);
      displayName = branchName.substring(labelEnd + 1).trim();
    }
    
    this.tasks[branchId] = {
      type: 'branch',
      branchType: branchChar === '+' ? 'positive' : 'negative',
      name: displayName,
      label: branchLabel,
      id: branchId,
      lane: laneName,
      parentGateway: parentGateway
    };
    
    // Add branch to parent gateway
    this.tasks[parentGateway].branches.push(branchId);
    
    // Add to lane
    if (this.currentLane && this.lanes[this.currentLane]) {
      this.lanes[this.currentLane].tasks.push(branchId);
    }
    
    // Add branch to scope for reference
    const simpleName = this.normalizeId(displayName);
    this.taskScope[simpleName] = branchId;
    this.taskScope[`${laneName}.${simpleName}`] = branchId;
    this.taskScope[`@${laneName}.${simpleName}`] = branchId;
    
    // Note: Connections will be added in connectSequentialTasks() to avoid duplicates
    
    return branchId;
  }

  private parseComment(line: string): string | null {
    if (!this.currentLane) {
      // Create a default lane if needed
      this.parseLane('@Default');
    }
    
    const commentText = line.substring(1).trim();
    const laneName = this.currentLane ? this.currentLane.replace('@', '') : 'Default';
    const normalizedLaneName = this.normalizeId(laneName);
    const commentId = `${normalizedLaneName}_comment_${this.normalizeId(commentText.substring(0, 20))}`;
    
    this.tasks[commentId] = {
      type: 'comment',
      name: commentText,
      id: commentId,
      lane: laneName
    };
    
    if (this.currentLane && this.lanes[this.currentLane]) {
      this.lanes[this.currentLane].tasks.push(commentId);
    }
    
    return commentId;
  }

  parseConnection(line: string): string | null {
    // Format: ^MessageName @Source.task -> @Target.task
    if (line.startsWith('^')) {
      try {
        console.log(`Processing message flow: ${line}`);
        
        // Extract the entire line content after the ^ prefix
        const content = line.substring(1).trim();
        
        // First check for arrow
        let sourcePart, targetPart, messageName, direction;
        
        if (content.includes('->')) {
          [sourcePart, targetPart] = content.split('->').map(s => s.trim());
          direction = 'forward';
        } else if (content.includes('<-')) {
          [targetPart, sourcePart] = content.split('<-').map(s => s.trim());
          direction = 'backward';
        } else {
          // No arrow, assume it's just a message name (old format)
          messageName = content;
          // This is handled differently, return early
          console.log(`Simple message name: ${messageName}`);
          return null;
        }
        
        // Process the source part - first word is the message name if it doesn't contain '@'
        if (sourcePart.includes('@')) {
          // Format is: MessageName @Source.task
          const parts = sourcePart.split(' ');
          messageName = parts[0];
          const sourceRef = parts.slice(1).join(' ');
          console.log(`Complex format - Message: "${messageName}", Source: "${sourceRef}", Target: "${targetPart}"`);
          
          // Resolve source and target
          const sourceId = this.resolveTaskId(sourceRef, false);
          const targetId = this.resolveTaskId(targetPart, false);
          
          if (sourceId && targetId) {
            // Create the message object
            const messageId = `message_${this.normalizeId(messageName)}`;
            
            // Add to messages array if not already there
            if (!this.messages.find(m => m.id === messageId)) {
              this.messages.push({
                type: 'message',
                name: messageName,
                id: messageId,
                sourceRef: sourceId,
                targetRef: targetId
              });
              console.log(`Added message: ${messageName} (${messageId})`);
            }
            
            // Check if there's a connection break between these tasks
            const hasBreak = this.hasConnectionBreakBetween(
              this.taskLineNumbers[sourceId],
              this.taskLineNumbers[targetId]
            );
            
            if (!hasBreak) {
              // Create connection in the right direction
              this.addConnection('message', sourceId, targetId, messageName);
              console.log(`SUCCESSFULLY added message flow: "${messageName}" from ${sourceId} to ${targetId}`);
            } else {
              console.log(`Message flow blocked by connection break: "${messageName}" from ${sourceId} to ${targetId}`);
            }
            
            return targetId; // Return the target as the last referenced task
          } else {
            console.error(`Failed to resolve IDs: source="${sourceRef}" (${sourceId || 'null'}), target="${targetPart}" (${targetId || 'null'})`);
          }
        } else {
          // Simple format - source and target are directly provided
          messageName = sourcePart;
          console.log(`Simple format - Message: "${messageName}", Target: "${targetPart}"`);
          
          // Try to find a source (probably the last task)
          const sourceId = this.lastTask;
          const targetId = this.resolveTaskId(targetPart, false);
          
          if (sourceId && targetId) {
            // Create the message object
            const messageId = `message_${this.normalizeId(messageName)}`;
            
            // Add to messages array if not already there
            if (!this.messages.find(m => m.id === messageId)) {
              this.messages.push({
                type: 'message',
                name: messageName,
                id: messageId,
                sourceRef: sourceId,
                targetRef: targetId
              });
              console.log(`Added message: ${messageName} (${messageId})`);
            }
            
            this.addConnection('message', sourceId, targetId, messageName);
            console.log(`SUCCESSFULLY added simple message flow: "${messageName}" from ${sourceId} to ${targetId}`);
            return targetId;
          }
        }
      } catch (error) {
        console.error(`Error parsing message flow: ${line}`, error);
      }
    }
    
    return null;
  }

  parseDataObject(line: string): string | null {
    // Format: #Name task_reference
    try {
      const content = line.substring(1).trim();
      const parts = content.split(' ');
      const name = parts[0];
      const taskRef = parts.slice(1).join(' ');
      
      console.log(`Parsing data object: "${name}", task reference="${taskRef}"`);
      
      const dataObjId = `data_${this.normalizeId(name)}`;
      
      // Create data object even if there's no task reference
      this.dataObjects.push({
        type: 'dataObject',
        name: name,
        id: dataObjId,
        taskRef: taskRef // Store the raw reference
      });
      
      // If task reference can be resolved, create a connection
      if (taskRef) {
        const taskId = this.resolveTaskId(taskRef, false);
        if (taskId) {
          // Create a data association
          this.addConnection('data', dataObjId, taskId);
          console.log(`Added data association from ${dataObjId} to ${taskId}`);
        } else {
          console.log(`Failed to resolve task ID for data object association: "${taskRef}"`);
        }
      }
      
      return dataObjId;
    } catch (error) {
      console.error(`Error parsing data object: ${line}`, error);
      return null;
    }
  }

  addConnection(type: string, sourceId: string, targetId: string, name: string = ''): void {
    const connId = `conn_${this.normalizeId(sourceId)}_${this.normalizeId(targetId)}`;
    
    this.connections.push({
      type: type === 'flow' ? 'sequenceFlow' : 
            type === 'message' ? 'messageFlow' : 'dataAssociation',
      id: connId,
      name: name,
      sourceRef: sourceId,
      targetRef: targetId
    });
  }

  injectConnectionBreaksAfterEndEvents(lines: string[]): void {
    // Find all End event references in the text and auto-inject breaks
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // Check if this line contains an End event reference
      if (line === '!End' || line === '!end' || line === '+!End' || line === '-!End') {
        // Check if there's already a connection break after this line
        const hasBreakAfter = this.connectionBreaks.some(breakLine => 
          breakLine > i && breakLine <= i + 2
        );
        
        if (!hasBreakAfter) {
          // Auto-inject a connection break after this End event
          this.connectionBreaks.push(i + 1);
          console.log(`Auto-injected connection break after End event at line ${i + 1}`);
        }
      }
    }
  }

  private connectTasks(): void {
    // Implement the correct connectivity model
    console.log('=== Establishing Connections (New Model) ===');
    
    // Phase 1: Build global task order
    const globalTaskOrder = this.buildGlobalTaskOrder();
    
    // Phase 2: Create implicit sequential connections
    this.createImplicitConnections(globalTaskOrder);
    
    // Phase 3: Process explicit connections from arrows
    this.processExplicitArrowConnections();
    
    // Phase 4: Connect message flows
    this.connectMessageFlows();
    
    // Phase 5: Handle special connections (gateways, events)
    this.handleSpecialConnections(globalTaskOrder);
    
    console.log(`Total connections: ${this.connections.length}`);
  }
  
  private buildGlobalTaskOrder(): any[] {
    const taskOrder: any[] = [];
    const lines = this.originalText.split('\n');
    let currentLane = null;
    
    // Process lines in order to build sequential task list
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;
      
      // Skip breaks, comments, process definitions
      if (line === '---' || line.match(/^-{3,}$/) || line.startsWith('//') || line.startsWith(':')) {
        continue;
      }
      
      // Track lane changes
      if (line.startsWith('@')) {
        currentLane = line;
        continue;
      }
      
      // Find tasks created from this line
      const tasksInLine = this.findTasksCreatedAtLine(i);
      
      // Add non-branch, non-comment tasks to order
      tasksInLine.forEach(taskId => {
        const task = this.tasks[taskId];
        if (task && task.type !== 'branch' && task.type !== 'comment') {
          taskOrder.push({
            id: taskId,
            lineNumber: i,
            lane: task.lane
          });
        }
      });
    }
    
    console.log(`Built global task order: ${taskOrder.length} tasks`);
    return taskOrder;
  }
  
  private findTasksCreatedAtLine(lineNumber: number): string[] {
    const tasks = [];
    for (const [taskId, line] of Object.entries(this.taskLineNumbers)) {
      if (line === lineNumber) {
        tasks.push(taskId);
      }
    }
    return tasks;
  }
  
  private createImplicitConnections(globalTaskOrder: any[]): void {
    console.log('Creating implicit sequential connections...');
    let count = 0;
    
    for (let i = 1; i < globalTaskOrder.length; i++) {
      const prev = globalTaskOrder[i - 1];
      const curr = globalTaskOrder[i];
      
      // Check for connection break
      if (this.hasConnectionBreakBetween(prev.lineNumber, curr.lineNumber)) {
        console.log(`Break between ${prev.id} and ${curr.id}`);
        continue;
      }
      
      // Create implicit connection
      this.addConnection('flow', prev.id, curr.id);
      count++;
    }
    
    console.log(`Created ${count} implicit connections`);
  }
  
  private processExplicitArrowConnections(): void {
    console.log('Processing explicit arrow connections...');
    let count = 0;
    
    // Process each line looking for arrows
    const lines = this.originalText.split('\n');
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line || !line.includes('->') && !line.includes('<-')) continue;
      
      // Parse arrow connections in this line
      const connections = this.parseArrowConnections(line, i);
      
      connections.forEach(conn => {
        this.addConnection('flow', conn.from, conn.to);
        count++;
        console.log(`Explicit: ${conn.from} -> ${conn.to}`);
      });
    }
    
    console.log(`Created ${count} explicit connections`);
  }
  
  private parseArrowConnections(line: string, lineNumber: number): any[] {
    const connections = [];
    const parts = this.splitConnections(line);
    
    // Track what each part resolves to
    const resolvedParts = [];
    
    for (let i = 0; i < parts.length; i++) {
      const part = parts[i];
      
      if (part === '->' || part === '<-') {
        resolvedParts.push({ type: 'arrow', value: part });
      } else {
        // Resolve this part to task ID(s)
        const taskId = this.resolvePartToTaskId(part, lineNumber);
        if (taskId) {
          resolvedParts.push({ type: 'task', value: taskId });
        }
      }
    }
    
    // Now create connections based on arrows
    for (let i = 0; i < resolvedParts.length; i++) {
      const curr = resolvedParts[i];
      
      if (curr.type === 'arrow') {
        const prev = i > 0 ? resolvedParts[i - 1] : null;
        const next = i < resolvedParts.length - 1 ? resolvedParts[i + 1] : null;
        
        if (curr.value === '->') {
          if (prev && prev.type === 'task' && next && next.type === 'task') {
            connections.push({ from: prev.value, to: next.value });
          }
        } else if (curr.value === '<-') {
          if (prev && prev.type === 'task' && next && next.type === 'task') {
            connections.push({ from: next.value, to: prev.value });
          }
        }
      }
    }
    
    return connections;
  }
  
  private resolvePartToTaskId(part: string, lineNumber: number): string | null {
    // First check if this part creates a new task
    const tasksAtLine = this.findTasksCreatedAtLine(lineNumber);
    
    // Try to match by content
    const normalized = this.normalizeId(part);
    
    for (const taskId of tasksAtLine) {
      const task = this.tasks[taskId];
      if (task && (this.normalizeId(task.name) === normalized || 
                  (task.messageName && this.normalizeId(task.messageName) === normalized))) {
        return taskId;
      }
    }
    
    // If not found in current line, resolve as reference
    return this.resolveTaskId(part, false);
  }
  
  private connectMessageFlows(): void {
    // Already implemented in original parser
    const sendTasks = Object.values(this.tasks).filter(task => task.type === 'send');
    const receiveTasks = Object.values(this.tasks).filter(task => task.type === 'receive');
    
    sendTasks.forEach(sendTask => {
      const messageName = sendTask.messageName;
      if (!messageName) return;
      
      const matchingReceive = receiveTasks.find(receiveTask => 
        receiveTask.messageName === messageName
      );
      
      if (matchingReceive) {
        const hasBreak = this.hasConnectionBreakBetween(
          this.taskLineNumbers[sendTask.id],
          this.taskLineNumbers[matchingReceive.id]
        );
        
        if (!hasBreak) {
          // Create message if not exists
          const messageId = `message_${this.normalizeId(messageName)}`;
          
          if (!this.messages.find(m => m.id === messageId)) {
            this.messages.push({
              type: 'message',
              name: messageName,
              id: messageId,
              sourceRef: sendTask.id,
              targetRef: matchingReceive.id
            });
          }
          
          this.addConnection('message', sendTask.id, matchingReceive.id, messageName);
        }
      }
    });
  }
  
  private handleSpecialConnections(globalTaskOrder: any[]): void {
    // Handle gateways
    Object.values(this.tasks).forEach(task => {
      if (task.type === 'gateway' && task.branches) {
        // Connect gateway to branches
        task.branches.forEach((branchId: string) => {
          this.addConnection('flow', task.id, branchId);
        });
        
        // Find merge point for branches
        const gatewayIndex = globalTaskOrder.findIndex(t => t.id === task.id);
        let mergePoint: any = null;
        
        // Look for next non-branch task
        for (let i = gatewayIndex + 1; i < globalTaskOrder.length; i++) {
          const candidate = globalTaskOrder[i];
          const candidateTask = this.tasks[candidate.id];
          
          if (candidateTask && candidateTask.type !== 'branch') {
            mergePoint = candidate.id;
            break;
          }
        }
        
        // Connect branches to merge point (unless they have explicit connections)
        if (mergePoint) {
          task.branches.forEach((branchId: string) => {
            // Check if branch already has outgoing connections
            const hasOutgoing = this.connections.some(conn => 
              conn.sourceRef === branchId && conn.type === 'sequenceFlow'
            );
            
            if (!hasOutgoing) {
              this.addConnection('flow', branchId, mergePoint);
            }
          });
        }
      }
    });
    
    // Handle Start/End events
    if (this.tasks['process_start'] && globalTaskOrder.length > 0) {
      this.addConnection('flow', 'process_start', globalTaskOrder[0].id);
    }
    
    if (this.tasks['process_end']) {
      // Find tasks with no outgoing connections
      globalTaskOrder.forEach(task => {
        const hasOutgoing = this.connections.some(conn => 
          conn.sourceRef === task.id && conn.type === 'sequenceFlow'
        );
        
        if (!hasOutgoing) {
          this.addConnection('flow', task.id, 'process_end');
        }
      });
    }
  }
  
  private connectSequentialTasks(): void {
    // First build a map of tasks and their sequence
    const gatewayMap: Record<string, any> = {};
    const gatewayBranchesMap: Record<string, any> = {};
    
    // Find all gateways and their branches
    Object.values(this.tasks).forEach(task => {
      if (task.type === 'gateway') {
        gatewayMap[task.id] = task;
        gatewayBranchesMap[task.id] = {
          positive: [],
          negative: [],
          nextTask: null,
          taskBeforeGateway: null
        };
      }
    });
    
    // Collect branches for each gateway
    Object.values(this.tasks).forEach(task => {
      if (task.type === 'branch' && task.parentGateway && gatewayBranchesMap[task.parentGateway]) {
        if (task.branchType === 'positive') {
          gatewayBranchesMap[task.parentGateway].positive.push(task.id);
        } else {
          gatewayBranchesMap[task.parentGateway].negative.push(task.id);
        }
      }
    });
    
    // Connect tasks in sequence within the same lane
    Object.values(this.lanes).forEach(lane => {
      let prevTask: any = null;
      
      // First find any gateway blocks in this lane
      const gateways = lane.tasks.filter(taskId => 
        this.tasks[taskId] && this.tasks[taskId].type === 'gateway'
      );
      
      // For each gateway, find the next task after it and its branches
      gateways.forEach(gatewayId => {
        const gateway = this.tasks[gatewayId];
        const gatewayIndex = lane.tasks.indexOf(gatewayId);
        
        // Find the first non-branch task after the gateway
        for (let i = gatewayIndex + 1; i < lane.tasks.length; i++) {
          const taskId = lane.tasks[i];
          const task = this.tasks[taskId];
          
          // Skip branches belonging to this gateway
          if (task.type === 'branch' && task.parentGateway === gatewayId) {
            continue;
          }
          
          // Skip other gateways
          if (task.type === 'gateway') {
            continue;
          }
          
          // Found the next task, store it
          gatewayBranchesMap[gatewayId].nextTask = taskId;
          break;
        }
      });
      
      // Now do sequential connections, skipping gateways
      for (let i = 0; i < lane.tasks.length; i++) {
        const currentTaskId = lane.tasks[i];
        const currentTask = this.tasks[currentTaskId];
        
        // Skip branches
        if (currentTask.type === 'branch') {
          continue;
        }
        
        // For gateways, only connect from previous task to the gateway
        if (currentTask.type === 'gateway') {
          if (prevTask) {
            // Connect previous task to gateway
            this.addConnection('flow', prevTask, currentTaskId);
            // Track the task before this gateway
            gatewayBranchesMap[currentTaskId].taskBeforeGateway = prevTask;
          }
          
          // Don't update prevTask for gateway
          continue;
        }
        
        // Check if this is a task right after a gateway
        let isAfterGateway = false;
        let sourceGateway: any = null;
        
        for (const [gId, data] of Object.entries(gatewayBranchesMap)) {
          if (data.nextTask === currentTaskId) {
            isAfterGateway = true;
            sourceGateway = gId;
            break;
          }
        }
        
        // If this is a task right after a gateway and has a previous task
        // that's not the gateway, we might need to skip the connection
        if (isAfterGateway && prevTask && !gatewayMap[prevTask]) {
          // Check if the prevTask is the task that came before the gateway
          const gatewayData = gatewayBranchesMap[sourceGateway];
          if (gatewayData && prevTask === gatewayData.taskBeforeGateway) {
            // Skip this connection - it would bypass the gateway
            prevTask = currentTaskId;
            continue;
          }
          
          // Don't connect if it's already connected from the gateway
          const fromGatewayConnections = this.connections.filter(conn =>
            conn.sourceRef === sourceGateway && conn.targetRef === currentTaskId
          );
          
          if (fromGatewayConnections.length > 0) {
            // Skip this connection, it comes from the gateway
            prevTask = currentTaskId;
            continue;
          }
        }
        
        // Connect the previous task to this one if it exists
        if (prevTask) {
          // Check if connection already exists
          const connectionExists = this.connections.some(conn => 
            conn.type === 'sequenceFlow' && 
            conn.sourceRef === prevTask && 
            conn.targetRef === currentTaskId
          );
          
          // Check if there's a connection break between these tasks
          const hasBreak = this.hasConnectionBreakBetween(
            this.taskLineNumbers[prevTask],
            this.taskLineNumbers[currentTaskId]
          );
          
          if (!connectionExists && !hasBreak) {
            this.addConnection('flow', prevTask, currentTaskId);
          }
        }
        
        // Update previous task for next iteration
        prevTask = currentTaskId;
      }
    });
    
    // Now handle branches and gateway connections
    Object.entries(gatewayBranchesMap).forEach(([gatewayId, data]) => {
      const gateway = this.tasks[gatewayId];
      
      // Connect gateway to all branches
      gateway.branches.forEach((branchId: string) => {
        this.addConnection('flow', gatewayId, branchId);
      });
      
      // Connect positive branches to the next task after the gateway
      data.positive.forEach((branchId: string) => {
        const branch = this.tasks[branchId];
        
        // Always connect positive branches to the next task if available
        if (data.nextTask) {
          this.addConnection('flow', branchId, data.nextTask);
        } else {
          // If no next task in current lane, connect to first task of next lane
          const currentLaneName = Object.keys(this.lanes).find(laneName => 
            this.lanes[laneName].tasks.includes(gatewayId)
          );
          
          if (currentLaneName) {
            const laneNames = Object.keys(this.lanes);
            const currentLaneIndex = laneNames.indexOf(currentLaneName);
            
            // Look for the next lane
            if (currentLaneIndex < laneNames.length - 1) {
              const nextLaneName = laneNames[currentLaneIndex + 1];
              const nextLane = this.lanes[nextLaneName];
              
              // Find first non-branch task in next lane
              for (const taskId of nextLane.tasks) {
                const task = this.tasks[taskId];
                if (task && task.type !== 'branch') {
                  // Check for connection break
                  const hasBreak = this.hasConnectionBreakBetween(
                    this.taskLineNumbers[branchId],
                    this.taskLineNumbers[taskId]
                  );
                  
                  if (!hasBreak) {
                    this.addConnection('flow', branchId, taskId);
                  }
                  break;
                }
              }
            }
          }
        }
      });
      
      // Don't automatically connect negative branches to anything
      // They're dead ends unless explicitly connected
    });
    
    // Connect matching send/receive tasks by message name
    const sendTasks = Object.values(this.tasks).filter(task => task.type === 'send');
    const receiveTasks = Object.values(this.tasks).filter(task => task.type === 'receive');
    
    sendTasks.forEach(sendTask => {
      // Use the message name property, not the full task name
      const messageName = sendTask.messageName;
      
      if (!messageName) return;
      
      // Find matching receive task with the same message name
      const matchingReceive = receiveTasks.find(receiveTask => 
        receiveTask.messageName === messageName
      );
      
      if (matchingReceive) {
        // Check if connection already exists
        const connectionExists = this.connections.some(conn => 
          conn.type === 'messageFlow' && 
          conn.sourceRef === sendTask.id && 
          conn.targetRef === matchingReceive.id
        );
        
        // Check if there's a connection break between these tasks
        const hasBreak = this.hasConnectionBreakBetween(
          this.taskLineNumbers[sendTask.id],
          this.taskLineNumbers[matchingReceive.id]
        );
        
        if (!connectionExists && !hasBreak) {
          // Create the message object
          const messageId = `message_${this.normalizeId(messageName)}`;
          
          // Add to messages array if not already there
          if (!this.messages.find(m => m.id === messageId)) {
            this.messages.push({
              type: 'message',
              name: messageName,
              id: messageId,
              sourceRef: sendTask.id,
              targetRef: matchingReceive.id
            });
            console.log(`Added implicit message: ${messageName} (${messageId})`);
          }
          
          this.addConnection('message', sendTask.id, matchingReceive.id, messageName);
        }
      }
    });
    
    // Connect across lanes for tasks that should follow each other
    this.connectAcrossLanes();
    
    // Special handling for start/end events
    this.connectEvents();
  }
  
  private connectAcrossLanes(): void {
    // Get all tasks sorted by their position in the process
    const allLanes = Object.values(this.lanes);
    const allTasksByPosition: any[] = [];
    
    // Flatten all tasks, maintaining their order from the lanes
    allLanes.forEach(lane => {
      lane.tasks.forEach(taskId => {
        const task = this.tasks[taskId];
        if (task && task.type !== 'branch') {
          allTasksByPosition.push(task.id);
        }
      });
    });
    
    // Add tasks not explicitly in lanes (if any)
    Object.values(this.tasks).forEach(task => {
      if (!allTasksByPosition.includes(task.id) && task.type !== 'branch') {
        allTasksByPosition.push(task.id);
      }
    });
    
    // Last task of the previous lane should connect to the first task of the next lane
    for (let i = 0; i < allLanes.length - 1; i++) {
      const currentLane = allLanes[i];
      const nextLane = allLanes[i + 1];
      
      // Skip if either lane is empty
      if (currentLane.tasks.length === 0 || nextLane.tasks.length === 0) {
        continue;
      }
      
      // Find the last non-branch task in the current lane
      let lastTaskInCurrentLane: any = null;
      for (let j = currentLane.tasks.length - 1; j >= 0; j--) {
        const taskId = currentLane.tasks[j];
        const task = this.tasks[taskId];
        if (task && task.type !== 'branch') {
          lastTaskInCurrentLane = taskId;
          break;
        }
      }
      
      // Find the first non-branch task in the next lane
      let firstTaskInNextLane: any = null;
      for (let j = 0; j < nextLane.tasks.length; j++) {
        const taskId = nextLane.tasks[j];
        const task = this.tasks[taskId];
        if (task && task.type !== 'branch') {
          firstTaskInNextLane = taskId;
          break;
        }
      }
      
      // Connect them if both found
      if (lastTaskInCurrentLane && firstTaskInNextLane) {
        // Check if connection already exists
        const connectionExists = this.connections.some(conn => 
          conn.type === 'sequenceFlow' && 
          conn.sourceRef === lastTaskInCurrentLane && 
          conn.targetRef === firstTaskInNextLane
        );
        
        // Also check if the target task is already connected to from something else
        const targetAlreadyConnected = this.connections.some(conn =>
          conn.type === 'sequenceFlow' &&
          conn.targetRef === firstTaskInNextLane
        );
        
        // Check if there's a connection break between these tasks
        const hasBreak = this.hasConnectionBreakBetween(
          this.taskLineNumbers[lastTaskInCurrentLane],
          this.taskLineNumbers[firstTaskInNextLane]
        );
        
        // Only add if no connection exists, target isn't already connected, and no break
        if (!connectionExists && !targetAlreadyConnected && !hasBreak) {
          this.addConnection('flow', lastTaskInCurrentLane, firstTaskInNextLane);
        }
      }
    }
  }
  
  connectEvents(): void {
    // Handle process-level Start event connection
    const processStart = this.tasks['process_start'];
    if (processStart) {
      // Find the first task in the entire process
      const firstTask = this.findFirstTaskInProcess();
      if (firstTask) {
        // Check if connection already exists
        const connectionExists = this.connections.some(conn => 
          conn.type === 'sequenceFlow' && 
          conn.sourceRef === 'process_start' && 
          conn.targetRef === firstTask
        );
        
        if (!connectionExists) {
          this.addConnection('flow', 'process_start', firstTask);
        }
      }
    }
    
    // Handle process-level End event connections (already handled by gateway branches and lane connections)
    // Process-level End events are connected by:
    // 1. Gateway branches that end with +!End or -!End
    // 2. Last tasks in lanes that have !End events
    const processEnd = this.tasks['process_end'];
    if (processEnd) {
      // Find tasks that should connect to the process end but aren't already connected
      Object.values(this.tasks).forEach(task => {
        if ((task.type === 'task' || task.type === 'send' || task.type === 'receive') && task.lane) {
          // Check if this task appears to be a final task in its lane
          const lane = this.lanes[`@${task.lane}`];
          if (lane && lane.tasks.length > 0) {
            const lastTaskInLane = lane.tasks[lane.tasks.length - 1];
            // If this is the last task in its lane and there's no outgoing connection
            if (lastTaskInLane === task.id) {
              const hasOutgoingSequenceFlow = this.connections.some(conn => 
                conn.sourceRef === task.id && conn.type === 'sequenceFlow'
              );
              
              if (!hasOutgoingSequenceFlow) {
                // Don't check for connection breaks when connecting to process-level End event
                // The breaks are meant to prevent OTHER cross-lane connections, not End event connections
                this.addConnection('flow', task.id, 'process_end');
              }
            }
          }
        }
      });
    }
  }
  
  findFirstTaskInProcess(): string | null {
    // Find the very first task that appears in the process
    // This should be the first non-event task in the first lane that contains tasks
    for (const [laneName, lane] of Object.entries(this.lanes)) {
      for (const taskId of lane.tasks) {
        const task = this.tasks[taskId];
        // Return the first non-event, non-branch task
        if (task && task.type !== 'event' && task.type !== 'branch') {
          return taskId;
        }
      }
    }
    return null;
  }

  resolveTaskId(taskRef: string, createIfNotFound: boolean = false): string | null {
    if (!taskRef) return null;
    
    taskRef = taskRef.trim();
    
    // 1. Check direct scope lookup
    if (this.taskScope[taskRef]) {
      return this.taskScope[taskRef];
    }
    
    const normalized = this.normalizeId(taskRef);
    if (this.taskScope[normalized]) {
      return this.taskScope[normalized];
    }
    
    // 2. Check if it's a fully qualified reference (lane.task)
    if (taskRef.includes('.')) {
      const parts = taskRef.split('.');
      
      if (parts.length === 2) {
        let [lane, task] = parts;
        
        if (lane.startsWith('@')) {
          lane = lane.substring(1);
        }
        
        const normalizedTask = this.normalizeId(task);
        
        const lookups = [
          `${lane}.${normalizedTask}`,
          `@${lane}.${normalizedTask}`,
          `${lane}_${normalizedTask}`
        ];
        
        const normalizedLane = this.normalizeId(lane);
        lookups.push(
          `${normalizedLane}.${normalizedTask}`,
          `@${normalizedLane}.${normalizedTask}`,
          `${normalizedLane}_${normalizedTask}`
        );
        
        for (const lookup of lookups) {
          if (this.taskScope[lookup]) {
            return this.taskScope[lookup];
          }
        }
        
        const directId = `${normalizedLane}_${normalizedTask}`;
        if (this.tasks[directId]) {
          return directId;
        }
        
        // If not found and createIfNotFound is true, create it in the specified lane
        if (createIfNotFound) {
          // Create the task in the specified lane, not the current lane
          const targetLane = `@${lane}`;
          let existingLane = this.lanes[targetLane];
          
          // If the lane doesn't exist, create it
          if (!existingLane) {
            this.lanes[targetLane] = {
              process: this.currentProcess,
              tasks: []
            };
            existingLane = this.lanes[targetLane];
          }
          
          // Create task in the target lane
          const taskId = `${normalizedLane}_${normalizedTask}`;
          
          this.tasks[taskId] = {
            type: 'task',
            name: task,
            id: taskId,
            lane: lane,
            implicit: true
          };
          
          // Add to target lane
          existingLane.tasks.push(taskId);
          
          // Add to scope
          this.taskScope[normalizedTask] = taskId;
          this.taskScope[`${lane}.${normalizedTask}`] = taskId;
          this.taskScope[`@${lane}.${normalizedTask}`] = taskId;
          
          return taskId;
        }
      }
    }
    
    // 3. Search across all lanes in order
    const allLaneNames = Object.keys(this.lanes);
    const currentLaneIndex = this.currentLane ? allLaneNames.indexOf(this.currentLane) : -1;
    
    // 3a. First search in current lane
    if (this.currentLane) {
      const currentLaneName = this.currentLane ? this.currentLane.replace('@', '') : 'Default';
      const taskInCurrentLane = this.findTaskInLane(currentLaneName, normalized);
      if (taskInCurrentLane) {
        return taskInCurrentLane.id;
      }
    }
    
    // 3b. Search in previous lanes (going up)
    for (let i = currentLaneIndex - 1; i >= 0; i--) {
      const laneName = allLaneNames[i].replace('@', '');
      const task = this.findTaskInLane(laneName, normalized);
      if (task) {
        return task.id;
      }
    }
    
    // 3c. Search in subsequent lanes (going down)
    for (let i = currentLaneIndex + 1; i < allLaneNames.length; i++) {
      const laneName = allLaneNames[i].replace('@', '');
      const task = this.findTaskInLane(laneName, normalized);
      if (task) {
        return task.id;
      }
    }
    
    // 4. If not found and createIfNotFound is true, create implicit task
    if (createIfNotFound && this.currentLane) {
      const implicitTaskId = this.createImplicitTask(taskRef);
      return implicitTaskId;
    }
    
    return null;
  }
  
  findTaskInLane(laneName: string, normalizedTaskName: string): any {
    const laneTasks = Object.values(this.tasks).filter(t => 
      t.lane && t.lane.toLowerCase() === laneName.toLowerCase()
    );
    
    return laneTasks.find(t => 
      this.normalizeId(t.name) === normalizedTaskName || 
      (t.messageName && this.normalizeId(t.messageName) === normalizedTaskName)
    );
  }
  
  createImplicitTask(taskName: string): string | null {
    if (!this.currentLane) {
      this.parseLane('@Default');
    }
    
    const laneName = this.currentLane ? this.currentLane.replace('@', '') : 'Default';
    const normalizedLaneName = this.normalizeId(laneName);
    const taskId = `${normalizedLaneName}_${this.normalizeId(taskName)}`;
    
    // Create the implicit task
    this.tasks[taskId] = {
      type: 'task',
      name: taskName,
      id: taskId,
      lane: laneName,
      implicit: true // Mark as implicitly created
    };
    
    // Add to lane tasks
    if (this.currentLane && this.lanes[this.currentLane]) {
      this.lanes[this.currentLane].tasks.push(taskId);
    }
    
    // Add to scope
    const simpleName = this.normalizeId(taskName);
    this.taskScope[simpleName] = taskId;
    this.taskScope[`${laneName}.${simpleName}`] = taskId;
    this.taskScope[`@${laneName}.${simpleName}`] = taskId;
    
    return taskId;
  }
  
  isSpecialLine(line: string): boolean {
    if (!line || !line.trim()) return true;
    const firstChar = line.trim().charAt(0);
    return [':', '@', '^', '#', '?', '+', '-', '"', '!', '/'].includes(firstChar);
  }

  normalizeId(name: string): string {
    if (!name) return 'unknown';
    return name.toLowerCase()
      .replace(/[^a-z0-9]+/g, '_')
      .replace(/^_+|_+$/g, '');
  }
  
  private hasConnectionBreakBetween(lineNum1: number, lineNum2: number): boolean {
    // Check if there's a "---" line between two line numbers
    if (lineNum1 === undefined || lineNum2 === undefined) return false;
    
    const minLine = Math.min(lineNum1, lineNum2);
    const maxLine = Math.max(lineNum1, lineNum2);
    
    // Check if any connection break exists between these lines
    return this.connectionBreaks.some(breakLine => 
      breakLine > minLine && breakLine < maxLine
    );
  }

  toMermaid(): string {
    // Start with flowchart definition and style classes
    let mermaid = `flowchart TD
  %% Define node styles
  classDef event fill:#ffd,stroke:#33f,stroke-width:2px
  classDef task fill:#bbf,stroke:#33f,stroke-width:2px
  classDef message fill:#bfb,stroke:#070,stroke-width:2px
  classDef gateway fill:#fcc,stroke:#f00,stroke-width:2px
  classDef comment fill:#ffd,stroke:#bb0,stroke-width:1px
  classDef dataObject fill:#ececff,stroke:#9370db,stroke-width:1px
  classDef branch fill:#d5ffd5,stroke:#3cb371,stroke-width:1px
`;

    // Add process-level events (Start/End) outside of any subgraph
    Object.values(this.tasks).forEach(task => {
      if (task.type === 'event' && (task.eventType === 'start' || task.eventType === 'end') && task.lane === null) {
        mermaid += `  ${task.id}([${task.name}]):::event\n`;
      }
    });

    // Add data objects
    this.dataObjects.forEach(dataObj => {
      mermaid += `  ${dataObj.id}[(${dataObj.name})]:::dataObject\n`;
    });

    // Group by lanes/pools
    const laneNodes: Record<string, any> = {};
    const laneDisplayNames: Record<string, any> = {};
    
    // Collect nodes for each lane (including branches)
    Object.entries(this.lanes).forEach(([laneName, lane]) => {
      const normalizedLaneName = this.normalizeId(laneName.replace('@', ''));
      laneNodes[normalizedLaneName] = lane.tasks.filter(taskId => {
        const task = this.tasks[taskId];
        return task; // Include all task types in subgraphs
      });
      // Store original lane name for display
      laneDisplayNames[normalizedLaneName] = laneName.replace('@', '');
    });
    
    // Add subgraphs for each lane
    Object.entries(laneNodes).forEach(([laneName, taskIds], index) => {
      if (taskIds.length > 0) {
        // Use sg prefix to ensure valid subgraph names
        const sgName = `sg${index}`;
        // Use the original lane name for display
        const displayName = laneDisplayNames[laneName] || laneName;
        mermaid += `  subgraph ${sgName}["${displayName}"]\n`;
        
        // Add nodes for each task in the lane
        taskIds.forEach((taskId: string) => {
          const task = this.tasks[taskId];
          
          if (!task) return;
          
          switch(task.type) {
            case 'task':
              mermaid += `    ${task.id}[${task.name}]:::task\n`;
              break;
            case 'send':
            case 'receive':
              mermaid += `    ${task.id}>${task.name}]:::message\n`;
              break;
            case 'gateway':
              mermaid += `    ${task.id}{${task.name}?}:::gateway\n`;
              break;
            case 'branch':
              mermaid += `    ${task.id}["${task.name}"]:::branch\n`;
              break;
            case 'comment':
              mermaid += `    ${task.id}[/${task.name}/]:::comment\n`;
              break;
            case 'event':
              mermaid += `    ${task.id}([${task.name}]):::event\n`;
              break;
          }
        });
        
        mermaid += `  end\n`;
      }
    });
    
    // Add branch nodes inside their parent lane subgraphs
    // This is handled in the lane subgraph code already
    
    // Add lane styles
    Object.keys(laneNodes).forEach((laneName, index) => {
      const sgName = `sg${index}`;
      const color = index % 2 === 0 ? 
        'fill:#f9f9f9,stroke:#333,stroke-width:1px' : 
        'fill:#e6f3ff,stroke:#333,stroke-width:1px';
      mermaid += `  style ${sgName} ${color}\n`;
    });
    
    // Add connections
    mermaid += '\n';
    
    // Add normal sequence flows
    mermaid += '  %% Sequence flows\n';
    this.connections.forEach(conn => {
      if (conn.type === 'sequenceFlow') {
        // Check if this is a gateway-to-branch connection or gateway-to-end connection
        const source = this.tasks[conn.sourceRef];
        const target = this.tasks[conn.targetRef];
        
        if (source && target) {
          if (source.type === 'gateway' && target.type === 'branch') {
            // Special formatting for gateway branches with labels
            mermaid += `  ${conn.sourceRef} -->|${target.label}| ${conn.targetRef}\n`;
          } else if (source.type === 'gateway' && target.type === 'event' && target.eventType === 'end') {
            // Gateway to End event with label (from branch)
            const label = conn.name || 'Yes'; // Default to 'Yes' if no label specified
            mermaid += `  ${conn.sourceRef} -->|${label}| ${conn.targetRef}\n`;
          } else {
            mermaid += `  ${conn.sourceRef} --> ${conn.targetRef}\n`;
          }
        }
      }
    });
    
    // Add message flows with dashed lines and labels
    mermaid += '  %% Message flows\n';
    this.connections.forEach(conn => {
      if (conn.type === 'messageFlow') {
        const label = conn.name ? `|${conn.name}|` : '';
        mermaid += `  ${conn.sourceRef} -.->${ label } ${conn.targetRef}\n`;
      }
    });
    
    // Add data associations with dashed lines
    mermaid += '  %% Data flows\n';
    this.connections.forEach(conn => {
      if (conn.type === 'dataAssociation') {
        mermaid += `  ${conn.sourceRef} -.-> ${conn.targetRef}\n`;
      }
    });
    
    return mermaid;
  }
}